package clockface_test

// out tests are in the clockface_test package
// - they can be outside the `clockface` package - as long as their name ends in `_test.go` they can be run.

import (
	"bytes"
	"encoding/xml"
	"learn-go-with-tests/16-maths/clockface"
	"testing"
	"time"
)

// an acceptance test is a test that means the whole function works, we can define certain parameters
// and when they are met we know the whole function works properly
// smaller unit tests will test that the smaller parts work first before we arrive at the final acceptance test.

// func TestSecondHandAtMidnight(t *testing.T) {
// 	tm := time.Date(1337, time.January, 1, 0, 0, 0, 0, time.UTC)

// 	want := clockface.Point{X: 150, Y: 150 - 90}
// 	got := clockface.SecondHand(tm)

// 	if got != want {
// 		t.Errorf("Got %v, wanted %v", got, want)
// 	}
// }

// func TestSecondHandAt30Seconds(t *testing.T) {
// 	tm := time.Date(1337, time.January, 1, 0, 0, 30, 0, time.UTC)

// 	want := clockface.Point{X: 150, Y: 150 + 90}
// 	got := clockface.SecondHand(tm)

// 	if got != want {
// 		t.Errorf("Got %v, wanted %v", got, want)
// 	}
// }

// // to test the SVG output for the clock is valid we need to parse the XML
// // using `zek` or the online version (https://xml-to-go.github.io/)
// // you can get all the correct names for the nodes and attributes:
// type Svg struct {
// 	XMLName xml.Name `xml:"svg"`
// 	Text    string   `xml:",chardata"`
// 	Xmlns   string   `xml:"xmlns,attr"`
// 	Width   string   `xml:"width,attr"`
// 	Height  string   `xml:"height,attr"`
// 	ViewBox string   `xml:"viewBox,attr"`
// 	Version string   `xml:"version,attr"`
// 	Circle  struct {
// 		Text  string `xml:",chardata"`
// 		Cx    string `xml:"cx,attr"`
// 		Cy    string `xml:"cy,attr"`
// 		R     string `xml:"r,attr"`
// 		Style string `xml:"style,attr"`
// 	} `xml:"circle"`
// 	Line []struct {
// 		Text  string `xml:",chardata"`
// 		X1    string `xml:"x1,attr"`
// 		Y1    string `xml:"y1,attr"`
// 		X2    string `xml:"x2,attr"`
// 		Y2    string `xml:"y2,attr"`
// 		Style string `xml:"style,attr"`
// 	} `xml:"line"`
// }

// // writes the ouput of `clockface.SVGWriter` to a `bytes.Buffer` and then `Unmarshal` into an `Svg`,
// // then check each `Line` in the `Svg` to see if any of them have the expected `X2` and `Y2` values,
// // returning early if it passes the test.
// func TestSvgWriterAtMidnight(t *testing.T) {
// 	tm := time.Date(1337, time.January, 1, 0, 0, 0, 0, time.UTC)

// 	b := bytes.Buffer{}
// 	clockface.SVGWriter(&b, tm)

// 	svg := Svg{}
// 	// unmarshal parses and maps the xml data to the struct
// 	xml.Unmarshal(b.Bytes(), &svg)

// 	// using 3 decimal places
// 	x2 := "150.000"
// 	y2 := "60.000"

// 	for _, line := range svg.Line {
// 		if line.X2 == x2 && line.Y2 == y2 {
// 			return
// 		}
// 	}

// 	t.Errorf("expected to find the second hand with x2 of %+v and y2 of %+v, in the SVG output %v", x2, y2, b.String())
// }

// this is all working so far, but we're not checking that all values are present,
// the X1 etc. aren't actually strings, and we don't care about the style tag or the empty text node that is generated by `zak`.
// we can tidy up and simplify the struct.
// also we don't need TestSecondHandAtMidnight and TestSecondHandAt30Seconds any more as our unit testing so for has worked,
// and now our acceptance test will be testing the output SVG

// looks like struct fields can be mapped to xml?
type SVG struct {
	XMLName xml.Name `xml:"svg"`
	Xmlns   string   `xml:"xmlns,attr"`
	Width   string   `xml:"width,attr"`
	Height  string   `xml:"height,attr"`
	ViewBox string   `xml:"viewBox,attr"`
	Version string   `xml:"version,attr"`
	Circle  Circle   `xml:"circle"`
	Line    []Line   `xml:"line"`
}

type Circle struct {
	Cx float64 `xml:"cx,attr"`
	Cy float64 `xml:"cy,attr"`
	R  float64 `xml:"r,attr"`
}

type Line struct {
	X1 float64 `xml:"x1,attr"`
	Y1 float64 `xml:"y1,attr"`
	X2 float64 `xml:"x2,attr"`
	Y2 float64 `xml:"y2,attr"`
}

// we might as well use table tests now too
func TestSVGWriterSecondHand(t *testing.T) {
	cases := []struct {
		time time.Time
		line Line
	}{
		{
			simpleTime(0, 0, 0),
			Line{150, 150, 150, 60},
		},
		{
			simpleTime(0, 0, 30),
			Line{150, 150, 150, 240},
		},
	}

	for _, c := range cases {
		t.Run(testName(c.time), func(t *testing.T) {
			b := bytes.Buffer{}
			clockface.SVGWriter(&b, c.time)

			svg := SVG{}
			xml.Unmarshal(b.Bytes(), &svg)

			if !containsLine(c.line, svg.Line) {
				t.Errorf("expected to find the second hand line %+v, in the SVG line %+v", c.line, svg.Line)
			}
		})
	}

}

func TestSVGWriterMinuteHand(t *testing.T) {
	cases := []struct {
		time time.Time
		line Line
	}{
		{
			simpleTime(0, 0, 0),
			Line{150, 150, 150, 70},
		},
	}

	for _, c := range cases {
		t.Run(testName(c.time), func(t *testing.T) {
			b := bytes.Buffer{}
			clockface.SVGWriter(&b, c.time)

			svg := SVG{}
			xml.Unmarshal(b.Bytes(), &svg)

			if !containsLine(c.line, svg.Line) {
				t.Errorf("Expected to find the minute hand line %+v, in the SVG lines %+v", c.line, svg.Line)
			}
		})
	}
}

func TestSVGWriterHourHand(t *testing.T) {
	cases := []struct {
		time time.Time
		line Line
	}{
		{
			simpleTime(6, 0, 0),
			Line{150, 150, 150, 200},
		},
	}

	for _, c := range cases {
		t.Run(testName(c.time), func(t *testing.T) {
			b := bytes.Buffer{}
			clockface.SVGWriter(&b, c.time)

			svg := SVG{}
			xml.Unmarshal(b.Bytes(), &svg)

			if !containsLine(c.line, svg.Line) {
				t.Errorf("Expected to find the hour hand line %+v, in the SVG lines %+v", c.line, svg.Line)
			}
		})
	}
}

// helper functions

// check if the wanted line is in any of the lines
func containsLine(l Line, ls []Line) bool {
	for _, line := range ls {
		if line == l {
			return true
		}
	}

	return false
}

// returns a date from hours, minutes, seconds
func simpleTime(hours, minutes, seconds int) time.Time {
	return time.Date(312, time.October, 28, hours, minutes, seconds, 0, time.UTC)
}

func testName(t time.Time) string {
	// returns a string format according to the layout - makes it easier to read in the tests
	return t.Format("15:04:05")
}
